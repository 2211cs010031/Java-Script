<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <script>
      //   let mypromise = new Promise((resolve, reject) => {
      //     let success = true;
      //     if (success) {
      //       resolve("The operation is successfull");
      //     } else {
      //       reject("The operation failed");
      //     }
      //   });
      //   mypromise.then((result) => {
      //     console.log(result);
      //   });
      //   mypromise.catch((error) => {
      //     console.log(error);
      //   });

      let mypromise = new Promise((resolve, reject) => {
        resolve(5);
      });
      mypromise
        .then((result) => {
          console.log(result);
          return result * 2;
        })
        .then((result) => {
          console.log(result);
          return result + 3;
        })
        .then((result) => {
          console.log(result);
        })
        .catch((error) => {
          console.log(error);
        });
    </script>
  </body>
</html>

theoritical:
A promise is a special java script
It allows asynchronous more efficient than call backs
Three states
1.pending:intitial state ,the promise is still waiting for the operation to finish
2.Fullfilled:the operation completes successful
3.Rejectes:the operatoin failled
Exp:
1.to create a promise-new promise
Two parameters 
Resolve:to mark the promise successfully
Reject:mark it as failed

2.handling the result:
.then():mathod is called  when promised is fullfilled
It will receive result from rresolve
.catvh method is called if the promise is rejected it recives the error message from reject()
